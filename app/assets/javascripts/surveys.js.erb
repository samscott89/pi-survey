$(function() {

	// When tab changes, it updates the hidden value to the relevant survey section
	$('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
	  $('input[name="survey_section').attr("value", e.target.getAttribute("sec")) 
	});

	$("#add-section-tab").click(function(e){
		// console.log("Add section - Click!");
	});

	$('[data-toggle="popover"]').popover({trigger: "hover"});

	// Function to change the question type box when value is changed
	$('[id^=question_option_group_attributes_type_id]').change(function() {
	  
	  var type = parseInt($(this).val(), 10);
	  var option_types = <%= QuestionType.multiples.ids %>;
	  idx = "question_option_group_attributes_question_type".length;
	  var qid = parseInt($(this).attr('id').substr(idx), 10);
	  if(!qid) qid = ""

	  if(option_types.indexOf(type) > -1 ){
	  	$("#question-options" + qid).show();
	  } else {
	  	$("#question-options" + qid).hide();
	  }
	  // $("#option_choice_option_group_id").attr("value", type);
	});
	// $("[id^=question-option] input").attr("name", "option_choice[0][choice_name]");
	var qc = {};
	$("[id^=question-options]").each(function(e){
		idx = "question-options".length;
		var qid = parseInt($(this).attr('id').substr(idx), 10)
		if(!qid) qid = ""
		// This ridiculous expressions counts the current number of question options.
		q_opts = $(this).find("input[id^=question_option_group_attributes_option_choices_attributes_][id*=choice_name]").length;
		qc[qid] = q_opts;
	})
	

	/*
	This makes the 'add' link clone a new question, and set the correct values.
	The hash qc stores the highest index added.
	*/
	$("[id^=add-question-option]").click(function(e){
		console.log(e)
		e.preventDefault();
		idx = "add-question-option".length
		var qid = parseInt($(this).attr('id').substr(idx), 10)
		if(!qid) qid = ""
		var opt = $("#question-option" + qid).clone();

		opt.find("input").attr("name",  "question[option_group_attributes][option_choices_attributes][" 
			+ qc[qid] + "][choice_name]");
		opt.find("input").attr("id",  "question_option_group_attributes_option_choices_attributes_"
		 + qc[qid] + "_choice_name");
		opt.find("label").attr("for",  "question_option_group_attributes_option_choices_attributes_"
		 + qc[qid] + "_choice_name");
		opt.find("input").val("");

		// Insert the new html before the add button.
		$("#add-question-option" + qid).before(opt)
		qc[qid]++;
		// console.log("q id: " + qid)
		// console.log(opt.find("input"))
	});


	// This code here handles setting has_other=1 when a radio button is set to "other"
	$('[id$=option_id_0]:radio').each(function(){
		this_id = $(this).prop('id');
		idx = this_id.indexOf('answer_options_attributes')
		var ans_id = this_id.substr(0, idx);
		if($('#' + ans_id + 'has_other').val() == 't') {
			$(this).prop('checked', true)
		}
		$("input[id^=" + ans_id + "]:radio").change(function(){
			if($(this).prop('id').indexOf('option_id_0') > 0){
				$('#' + ans_id + 'has_other').val('t');
			} else{
				$('#' + ans_id + 'has_other').val('f');
			}
		});

	})

	$("#chart_type_id").change(function() {
        chart_opt = $(this).val();
        console.log(chart_opt);
		if(chart_opt == <%= ChartType.where(name: "line_chart").first.id %>) {
			$("#extra-question").show();
		} else {
			$("#extra-question").hide();
		}
    });
});